server:
  port: 8001
  servlet:
    context-path: /demon-payment-service
  tomcat:
    uri-encoding: utf-8

spring:
  application:
    name: demon-payment-service
  cloud:
    alibaba:
      seata:
        tx-service-group: demon
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: org.gjt.mm.mysql.Driver
    url: jdbc:mysql://localhost:3306/demon
    username: root
    password: mysql
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8


management:
  endpoints:
    web:
      exposure:
        include: '*'


#feign:
#  client:
#    config:
#      default:
#        connect-timeout: 10000
#        read-timeout: 10000

#  mvc:
#    pathmatch:
#      use-suffix-pattern: true
#  # 配置文件
#  profiles:
#    active: test


#    generator:
#      write_numbers_as_strings: true

# mybatis
mybatis:
  mapper-locations: classpath:mapper/**/*.xml
  type-aliases-package: com.hu.pojo.po
  configuration:
    map-underscore-to-camel-case: true

## dao 的日志
#logging:
#  level:
#    com:
#      rao:
#        dao: debug


##security
security:
  oauth2:
    client:
      client-id: client
      client-secret: $2a$10$nQInQwRnPK77kAwMW97gPej0lV1o1sn5jEXOdNxk68vXogV8BrWNG
      access-token-uri: http://demon-security-auth/demon-security-auth/oauth/token
      user-authorization-uri: http://demon-security-auth/demon-security-auth/oauth/authorize
      grant-type: password,refresh_token
      scope: backend
    resource:
      user-info-uri: http://demon-security-auth/demon-security-auth/user/info

#logging:
#  level:
#    com:
#      hu:
#       mapper: debug
#    io:
#      seata: debug


#seata:
#  enabled: true
#  application-id: demon-payment-service
#  tx-service-group: demon # 事务群组（可以每个应用独立取名，也可以使用相同的名字）
#  client:
#    rm-report-success-enable: true
#    rm-table-meta-check-enable: false # 自动刷新缓存中的表结构（默认false）
#    rm-report-retry-count: 5 # 一阶段结果上报TC重试次数（默认5）
#    rm-async-commit-buffer-limit: 10000 # 异步提交缓存队列长度（默认10000）
#    rm:
#      lock:
#        lock-retry-internal: 10 # 校验或占用全局锁重试间隔（默认10ms）
#        lock-retry-times:    30 # 校验或占用全局锁重试次数（默认30）
#        lock-retry-policy-branch-rollback-on-conflict: true # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）
#    tm-commit-retry-count:   3 # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）
#    tm-rollback-retry-count: 3 # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）
#    undo:
#      undo-data-validation: true # 二阶段回滚镜像校验（默认true开启）
#      undo-log-serialization: jackson # undo序列化方式（默认jackson）
#      undo-log-table: undo_log  # 自定义undo表名（默认undo_log）
#    log:
#      exceptionRate: 100 # 日志异常输出概率（默认100）
#    support:
#      spring:
#        datasource-autoproxy: true
#  service:
#    vgroup-mapping:
#      demon: default
#    #      my_test_tx_group: default # TC 集群（必须与seata-server保持一致）
#    enable-degrade: false # 降级开关
#    disable-global-transaction: false # 禁用全局事务（默认false）
#    grouplist:
#      default: 127.0.0.1:8091
#  transport:
#    shutdown:
#      wait: 3
#    thread-factory:
#      boss-thread-prefix: NettyBoss
#      worker-thread-prefix: NettyServerNIOWorker
#      server-executor-thread-prefix: NettyServerBizHandler
#      share-boss-worker: false
#      client-selector-thread-prefix: NettyClientSelector
#      client-selector-thread-size: 1
#      client-worker-thread-prefix: NettyClientWorkerThread
#    type: TCP
#    server: NIO
#    heartbeat: true
#    serialization: seata
#    compressor: none
#    enable-client-batch-send-request: true # 客户端事务消息请求是否批量合并发送（默认true）
#  registry:
#    file:
#      name: file.conf
#    type: nacos
#    nacos:
#      server-addr: localhost:8848
#      namespace:
#      cluster: default
#      group: SEATA_GROUP
#  config:
#    file:
#      name: file.conf
#    type: nacos
#    nacos:
#      namespace:
#      server-addr: localhost:8848
#      group: SEATA_GROUP














#eureka:
#  instance:
#    #eureka服务端的实例名称
#    hostname: ${spring.cloud.client.ip-address}
#    prefer-ip-address: true
#    instance-id: ${spring.application.name}@${spring.cloud.client.ip-address}@${server.port}
#  client:
#    #false表示不向注册中心注册自己
#    register-with-eureka: true
#    #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
#    fetch-registry: true
#    service-url:
#      #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址
#      #defaultZone: http://eureka7002.com:7002/eureka/  #互相注册
#      defaultZone: http://127.0.0.1:7001/eureka/   #单机模式

